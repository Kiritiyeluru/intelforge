[tool:pytest]
# Enhanced Pytest configuration for IntelForge with superior tools

# Test discovery
testpaths = unit_tests integration_tests
python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*

# Minimum version requirements
minversion = 8.0

# Enhanced output options with superior tools
addopts = 
    -v
    --tb=short
    --strict-markers
    --strict-config
    # Coverage with pytest-cov (6.2.1)
    --cov=scrapers
    --cov=scripts
    --cov-report=term-missing
    --cov-report=html:reports/coverage
    --cov-report=xml:reports/coverage.xml
    --junitxml=reports/junit.xml
    # Parallel execution with pytest-xdist (3.8.0)
    -n auto
    # Performance benchmarking with pytest-benchmark (5.1.0)
    --benchmark-only
    --benchmark-sort=mean
    --benchmark-json=reports/benchmarks.json
    --benchmark-histogram=reports/benchmark_histogram
    # Property-based testing with Hypothesis (6.135.26)
    --hypothesis-show-statistics

# Enhanced Markers for superior testing
markers =
    unit: Unit tests
    integration: Integration tests
    performance: Performance tests with pytest-benchmark
    scraping: Web scraping tests
    slow: Slow running tests
    api: Tests that require API access
    property: Property-based tests with Hypothesis
    snapshot: Snapshot tests with pytest-approvaltests
    benchmark: Performance benchmark tests
    async: Async tests with pytest-asyncio
    parallel: Tests that can run in parallel with pytest-xdist
    fuzzing: Property-based fuzzing tests
    
# Warnings
filterwarnings =
    ignore::UserWarning
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning

# Test timeout (in seconds)
timeout = 300

# Parallel execution
# addopts = -n auto  # Uncomment to enable parallel testing

# Log capture
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# Coverage configuration
[coverage:run]
source = scrapers, scripts
omit = 
    */tests/*
    */test_*
    */__pycache__/*
    */venv/*
    */env/*

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == .__main__.:
    class .*\bProtocol\):
    @(abc\.)?abstractmethod