{
  "testing_infrastructure_guidance": {
    "status": "✅ COMPLETE - Enhanced with superior tools from testing_tools_stack.json",
    "last_updated": "2025-07-12",
    "approach": "Hybrid testing strategy using optimal tools for each scenario"
  },


  },

  "tool_selection_strategy": {
    "principle": "Use superior tools from testing_tools_stack.json based on performance",
    "decision_matrix": {
      "performance_benchmarking": {
        "superior_choice": "Rust criterion",
        "reason": "100x faster (93.6ns vs 9.95μs), sub-microsecond precision",
        "replaced": "Python timeit/pytest-benchmark"
      },
      "load_testing": {
        "superior_choice": "k6",
        "reason": "Go-based, 10x better concurrency than Python async",
        "replaced": "Python asyncio stress testing"
      },
      "security_fuzzing": {
        "superior_choice": "Rust cargo-fuzz",
        "reason": "LLVM-based, memory-safe, 10x-100x faster",
        "replaced": "Python manual fuzzing"
      },
      "cli_benchmarking": {
        "superior_choice": "hyperfine",
        "reason": "Statistical analysis, outlier detection, multiple export formats",
        "replaced": "Python timeit"
      },
      "property_testing": {
        "superior_choice": "Hypothesis",
        "reason": "Automatic edge case discovery, shrinking, custom strategies",
        "replaced": "Basic pytest assertions"
      }
    }
  },

  "hybrid_testing_approach": {
    "rust_tools_for": [
      "Performance regression testing (criterion)",
      "Security vulnerability testing (cargo-fuzz)",
      "Core algorithm validation (proptest)",
      "Load testing infrastructure (k6)",
      "Snapshot/configuration testing (insta)",
      "CLI performance benchmarking (hyperfine)"
    ],
    "python_tools_for": [
      "ML model testing (sentence-transformers, BERTopic)",
      "API integration testing (Reddit, GitHub, ChromaDB)",
      "End-to-end workflow testing",
      "Complex fixture/mock testing",
      "Python library compatibility testing"
    ]
  },


  },

  "performance_advantages": {
    "rust_criterion_vs_python": "100x faster execution (93.6ns vs 9.95μs)",
    "k6_vs_python_async": "10x better concurrency, lower memory usage",
    "hyperfine_vs_timeit": "Statistical analysis with confidence intervals",
    "cargo_fuzz_vs_python": "Memory-safe LLVM fuzzing vs manual testing",
    "hypothesis_vs_basic": "Automatic edge case discovery vs manual test cases"
  },

  "reporting_and_artifacts": {
    "report_directory": "session_docs/reorganized_docs/testing/reports/",
    "report_types": [
      "rust_tests/ - Criterion benchmarks, insta snapshots",
      "python_tests/ - Pytest with coverage, benchmarks",
      "performance_benchmarks/ - Hyperfine CLI benchmarks",
      "load_tests/ - k6 load testing results",
      "security_tests/ - Fuzzing and security validation"
    ],
    "report_formats": ["JSON", "Markdown", "HTML", "CSV"]
  },

  "integration_with_development": {
    "before_testing": "Check .claude/testing_tools_stack.json for tool versions and status",
    "during_testing": "Use hybrid_test_runner.py for optimal tool selection",
    "test_configuration": "All settings in session_docs/reorganized_docs/testing/config/",
    "ci_cd_integration": "Enhanced fuzzing workflows in advanced_testing.md"
  },

  "quick_reference": {
    "need_performance_benchmarks": "Use Rust criterion - 100x faster than Python",
    "need_load_testing": "Use k6 - Superior concurrency vs Python async",
    "need_security_testing": "Use Rust cargo-fuzz - Memory-safe LLVM fuzzing",
    "need_cli_benchmarks": "Use hyperfine - Statistical analysis vs timeit",
    "need_property_testing": "Use Hypothesis - Automatic edge case discovery",
    "need_integration_testing": "Use Python pytest - Best for ML/API testing"
  }
}
